JAVA CODE : DOCUMENTATION OF CODE
In the application we were asked to write a code that gives a direct flight or route to the user, given a state and city.
The approach I used, was to find what values I can use to create a link between routes and airports, such that if a route comes from a specific location to a destination, it returns the direct flight, else it returns optimal routes that will get to the destination.
Alternatively, it is supposed to take the user input from a file, but because of some challenges accounted and limited, I decided to enter the city manually. Hence, there is a method “findAirport” that takes the start city and end city. If one would like to text the code, kindly enter it manually. The code will be improved soon. The steps used to implement the code are as follows:
Step 1: Read all files, Airlines in HashMap with the AirlineId as the key and Airline object as the value, same as the airports where the airport Id was the key and the airport the object, and read the routes file as an array.
Step 2 : I create different methods, in all the class, the method of reading the files, assigning the attributes to the parameters and a method find route that takes the two city and proceed in getting the IDs, that will end up be useful in finding the direct path.
Step 4: After creating the class, and pass the read arguments to the variables, I took the ID of the Source City and the destination city, and I compared them with the Source Airport Id and Destination Airport Id found in the routes file. So using an if statement, I checked that in the route objects presented in the array List of routes,
if the Ids are corresponding to the  given ones at the same times, to print out that route object; which represents the direct route.
Step 5 : In the same if statement that compares the Ids, I took the airlineID  found in the route object, and paste it as key to the airline HashMap, to get the whole object representing the flight I have to take from city A to city B.
For future work on the same project, I will implement the method to suggest optimal routes and also a method to suggest a best route between two cities, if there are flight stops. For now, I was challenged by implementing different logic such as the use of Haversine Function, hence the choice to make it as simple and logic as I can.
